#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var {Server} = require('socket.io');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Games funcs
 */
var io = new Server(server);
let players = {};
let allData ={};

io.on("connection", (socket) => {
  console.info(`Client connected [id=${socket.id}]`);
  socket.on('room', (roomID) => {
    socket.join(roomID);
    if(!players.hasOwnProperty(roomID)) {
      players[roomID]=[];
      console.log("test")
    }
    console.info('Client connected on room : '+roomID);
    io.in(roomID).emit('requestName',"");
    socket.on('Name', (Name) => {
      if (!players[roomID].includes(Name)) {
        players[roomID].push(Name);
      }
    })
    io.in(roomID).emit('playerList',players[roomID]);
    socket.on('StartGame',()=>{
      console.log("The game has started")
      socket.emit('game')
      socket.in(roomID).emit('game')
    })
    socket.on('startDrawing',(data)=>{
      if(!allData.hasOwnProperty(roomID)){
        allData[roomID]=[]
      }
      if(data['isDrawing']){
        allData[roomID].push({x:data['x'],y:data['y'], color:data['color']})
        socket.in(roomID).emit('draw',allData[roomID]);
      }
    })
  })
  
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
