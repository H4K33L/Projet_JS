#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var {Server} = require('socket.io');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);



const word =(callback)=>{
  fs.readFile("words.json",(err,data)=>{
    if(err){throw err}

    let list =JSON.parse(data).words;
    let wordToFind = ""

    wordToFind=list[Math.floor(Math.random() * list.length)]
    callback(wordToFind);
  })
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Games funcs
 */
var io = new Server(server);
let players = {};
let allData ={};
let allMessage ={};

io.on("connection", (socket) => {
  console.info(`Client connected [id=${socket.id}]`);
  socket.on('check name', data => {
    if(players.hasOwnProperty(data[1])) {
      if (!Object.values(players[data[1]]).includes(data[0])) {
        io.emit("goodName",true)
      } else {
        io.emit("goodName",false)
      }
    } else {
      io.emit("goodName",true)
    }
  })

  socket.on('room', (roomID) => {
    socket.join(roomID);
    if(!players.hasOwnProperty(roomID)) {
      players[roomID]={};
    }
    console.info('Client connected on room : '+roomID);
    
    socket.on('Name', (Name) => {
      players[roomID][socket.id]= [Name,0] ;
      io.in(roomID).emit('playerList',players[roomID]);
    })

    socket.on("banVote", userID => {
      players[roomID][userID][1]++
      if (players[roomID][userID][1] >= Object.keys(players[roomID]).length - 1) {
        io.to(userID).emit("deco")
      }
    })
    
    socket.on('disconnect', () => {
      console.log(`Client disconnected [id=${socket.id}]`);
      let temp = {};
      Object.keys(players[roomID]).forEach(id => {
        if (id === socket.id != true) {
          temp[id] = players[roomID][id]
        }
      })
      players[roomID] = temp;
      io.in(roomID).emit('playerList',players[roomID]);
      temp = {};
      Object.keys(players).forEach(roomid => {
        if (Object.keys(players[roomid]).length === 0 != true) {
          temp[roomid]=players[roomid]
          allMessage[roomID].splice(0, allMessage[roomID].length);
          allData[roomID].splice(0, allData[roomID].length);
        }
      })
      players = temp;
    });

    socket.on('StartGame',()=>{
      console.log("The game has started")
      socket.emit('game')
      socket.in(roomID).emit('game')
    })
    socket.on('requestWord',()=>{
        word((wordToFind)=>{
          console.log(wordToFind)
          socket.in(roomID).emit('words', wordToFind);
          socket.emit('words', wordToFind)
        })
        
    })
    socket.on('startDrawing',(data)=>{
      let {x,y,draw}=data
      if(!allData.hasOwnProperty(roomID)){
        allData[roomID]=[]
      }
      if(draw){
        allData[roomID].push({x:x,y:y})
        socket.in(roomID).emit('draw',allData[roomID]);
      }
    })

    socket.on('clear', ()=>{
      allData[roomID].splice(0, allData[roomID].length);
      socket.in(roomID).emit('clearAll')
    })

    socket.on('changeColor',(color)=>{
      socket.in(roomID).emit('newColor',color)
    })
    socket.on('changeSize',(size)=>{
      socket.in(roomID).emit('newSize',size)
    })
    socket.on('sendMessage', (newMessage) => {
      let {name,send}=newMessage
      if(!allMessage.hasOwnProperty(roomID)){
        allMessage[roomID]=[]
      }
      allMessage[roomID].push({name:name,message:send})
      socket.emit('newMessage', allMessage[roomID])
      socket.in(roomID).emit('newMessage', allMessage[roomID]);
    });
    socket.on('next',()=>{
      word((wordToFind)=>{
        console.log(wordToFind)
        socket.in(roomID).emit('words', wordToFind);
        socket.emit('words', wordToFind)
      })
    })
  })
})

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}